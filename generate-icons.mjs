import fs from 'fs';
import path from 'path';
import { pathToFileURL } from 'url';

// 1. CONFIGURE YOUR ICONS HERE
const iconsToGenerate = {
  twemoji: [
    'rocket',
    'waving-hand',
    'grinning-face',
    'eyes',
    'paperclip',
    'check-mark-button',
    'party-popper',
    'person-facepalming'
  ],
  mdi: [
    'paperclip'
  ]
};

// 2. LOGIC TO GENERATE THE SCSS FILE
console.log('Generating icons SCSS...');

let scssContent = `// This file is auto-generated by generate-icons.mjs. Do not edit directly.
// Last generated: ${new Date().toISOString()}

$icons: (
`;

for (const collection in iconsToGenerate) {
  const iconNames = iconsToGenerate[collection];
  if (iconNames.length === 0) continue;

  const iconsJsonPath = path.resolve(process.cwd(), 'node_modules', '@iconify-json', collection, 'icons.json');
  const infoJsonPath = path.resolve(process.cwd(), 'node_modules', '@iconify-json', collection, 'info.json');

  const { default: iconSet } = await import(pathToFileURL(iconsJsonPath).href, { assert: { type: 'json' } });
  const { default: collectionInfo } = await import(pathToFileURL(infoJsonPath).href, { assert: { type: 'json' } });

  // --- THIS IS THE FINAL FIX ---
  // Get the default dimensions from info.json
  let fallbackWidth = collectionInfo.width;
  let fallbackHeight = collectionInfo.height;

  // For square icon sets like twemoji that only define height, assume width is the same.
  if (fallbackHeight && !fallbackWidth) {
    fallbackWidth = fallbackHeight;
  }

  scssContent += `  "${collection}": (\n`;

  for (const name of iconNames) {
    const iconData = iconSet.icons[name];
    if (!iconData) {
      console.warn(`  [WARNING] Icon "${name}" not found in the "${collection}" collection. Skipping.`);
      continue;
    }

    const body = iconData.body;
    // Use the icon's own dimensions first, then the collection's calculated fallback.
    const width = iconData.width || fallbackWidth;
    const height = iconData.height || fallbackHeight;

    if (!width || !height) {
      console.error(`\n[FATAL ERROR] Could not determine dimensions for icon '${name}' in collection '${collection}'.`);
      process.exit(1);
    }

    const viewBox = `0 0 ${width} ${height}`;
    const rawSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="${viewBox}">${body}</svg>`;
    const encodedSvg = rawSvg.replace(/#/g, '%23');
    const sassSafeSvg = encodedSvg.replace(/"/g, "'");

    scssContent += `    "${name}": (encoded-svg: "${sassSafeSvg}"),\n`;
  }
  scssContent += `  ),\n`;
}

scssContent += ');\n';

const outputPath = path.resolve('src/styles/_generated-icons.scss');
fs.writeFileSync(outputPath, scssContent);

console.log(`âœ… Successfully generated ${outputPath}. Now, recompile your Sass.`);